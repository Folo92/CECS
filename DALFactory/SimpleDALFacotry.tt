<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile =@"..\\Model\\Model1.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using DAL;
using System;
using System.Collections.Generic;

namespace DALFactory
{
    //抽象工厂创建具体工厂，提供所有数据操作类DAL实例的创建方法（简单工厂）
    public partial class AbstractDALFactory
    {
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{    
#>		
        public static I<#=entity.Name#>DAL Create<#=entity.Name#>DAL()
        {
            string fullClassName = NameSpace + ".<#=entity.Name#>DAL";
            return CreateInstance(fullClassName) as I<#=entity.Name#>DAL;
        }
<#}#>
    }
	
}