<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\Model\\Model1.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using DAL;
using System;
using System.Collections.Generic;

namespace DALFactory
{
    //负责完成所有数据操作类DAL实例的创建
	public partial class DbSession : IDbSession
    {
<#
// Emit Entity Types

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);    
#>	
		private I<#=entity.Name#>DAL _<#=entity.Name#>DAL;
        public I<#=entity.Name#>DAL <#=entity.Name#>DAL
        {
            get
            {
                if(_<#=entity.Name#>DAL == null)
                {
                    _<#=entity.Name#>DAL = AbstractDALFactory.Create<#=entity.Name#>DAL();
                }
                return _<#=entity.Name#>DAL;
            }
            set { _<#=entity.Name#>DAL = value; }
        }
<#}#>
	}	
}